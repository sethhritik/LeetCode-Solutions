Reversing K nodes at a time in linked list is similar to reversing a specified portion of a linked list. So I created a function reverse() which reverse a specified portion of the linked list from m to n. I called this function in a loop with portion as [i,i+k-1], [i+k,i+2k -1], and so on until we have a upper bound less than the number of nodes in the given linked list.

This was my approach, feel free to share your approach :).

class Solution:
    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:
        if k==1:
            return head
        def reverse(head, m, n):
 
            prev = None
            curr = head
            i = 1
            while curr is not None and i < m:
                prev = curr
                curr = curr.next
                i = i + 1

            start = curr
            end = None
            while curr is not None and i <= n:
                next = curr.next
                curr.next = end
                end = curr
                curr = next
                i = i + 1

            start.next = curr
            if prev is None:
                head = end
            else:
                prev.next = end

            return head
        n=0
        cur = head
        while cur:
            cur=cur.next
            n+=1
        for i in range(1,n+1,k): 
            if i+k-1<=n:
                head = reverse(head, i, i+k-1)
        return head
